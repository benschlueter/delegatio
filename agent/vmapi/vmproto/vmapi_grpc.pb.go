// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: vmapi.proto

package vmproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	ExecCommandStream(ctx context.Context, opts ...grpc.CallOption) (API_ExecCommandStreamClient, error)
	ExecCommandReturnStream(ctx context.Context, in *ExecCommandRequest, opts ...grpc.CallOption) (API_ExecCommandReturnStreamClient, error)
	ExecCommand(ctx context.Context, in *ExecCommandRequest, opts ...grpc.CallOption) (*ExecCommandResponse, error)
	WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error)
	ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) ExecCommandStream(ctx context.Context, opts ...grpc.CallOption) (API_ExecCommandStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], "/vmapi.API/ExecCommandStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIExecCommandStreamClient{stream}
	return x, nil
}

type API_ExecCommandStreamClient interface {
	Send(*ExecCommandStreamRequest) error
	Recv() (*ExecCommandStreamResponse, error)
	grpc.ClientStream
}

type aPIExecCommandStreamClient struct {
	grpc.ClientStream
}

func (x *aPIExecCommandStreamClient) Send(m *ExecCommandStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aPIExecCommandStreamClient) Recv() (*ExecCommandStreamResponse, error) {
	m := new(ExecCommandStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) ExecCommandReturnStream(ctx context.Context, in *ExecCommandRequest, opts ...grpc.CallOption) (API_ExecCommandReturnStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[1], "/vmapi.API/ExecCommandReturnStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIExecCommandReturnStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ExecCommandReturnStreamClient interface {
	Recv() (*ExecCommandReturnStreamResponse, error)
	grpc.ClientStream
}

type aPIExecCommandReturnStreamClient struct {
	grpc.ClientStream
}

func (x *aPIExecCommandReturnStreamClient) Recv() (*ExecCommandReturnStreamResponse, error) {
	m := new(ExecCommandReturnStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) ExecCommand(ctx context.Context, in *ExecCommandRequest, opts ...grpc.CallOption) (*ExecCommandResponse, error) {
	out := new(ExecCommandResponse)
	err := c.cc.Invoke(ctx, "/vmapi.API/ExecCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) WriteFile(ctx context.Context, in *WriteFileRequest, opts ...grpc.CallOption) (*WriteFileResponse, error) {
	out := new(WriteFileResponse)
	err := c.cc.Invoke(ctx, "/vmapi.API/WriteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ReadFile(ctx context.Context, in *ReadFileRequest, opts ...grpc.CallOption) (*ReadFileResponse, error) {
	out := new(ReadFileResponse)
	err := c.cc.Invoke(ctx, "/vmapi.API/ReadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility
type APIServer interface {
	ExecCommandStream(API_ExecCommandStreamServer) error
	ExecCommandReturnStream(*ExecCommandRequest, API_ExecCommandReturnStreamServer) error
	ExecCommand(context.Context, *ExecCommandRequest) (*ExecCommandResponse, error)
	WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error)
	ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error)
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAPIServer struct {
}

func (UnimplementedAPIServer) ExecCommandStream(API_ExecCommandStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecCommandStream not implemented")
}
func (UnimplementedAPIServer) ExecCommandReturnStream(*ExecCommandRequest, API_ExecCommandReturnStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecCommandReturnStream not implemented")
}
func (UnimplementedAPIServer) ExecCommand(context.Context, *ExecCommandRequest) (*ExecCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecCommand not implemented")
}
func (UnimplementedAPIServer) WriteFile(context.Context, *WriteFileRequest) (*WriteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFile not implemented")
}
func (UnimplementedAPIServer) ReadFile(context.Context, *ReadFileRequest) (*ReadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_ExecCommandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).ExecCommandStream(&aPIExecCommandStreamServer{stream})
}

type API_ExecCommandStreamServer interface {
	Send(*ExecCommandStreamResponse) error
	Recv() (*ExecCommandStreamRequest, error)
	grpc.ServerStream
}

type aPIExecCommandStreamServer struct {
	grpc.ServerStream
}

func (x *aPIExecCommandStreamServer) Send(m *ExecCommandStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aPIExecCommandStreamServer) Recv() (*ExecCommandStreamRequest, error) {
	m := new(ExecCommandStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _API_ExecCommandReturnStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecCommandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ExecCommandReturnStream(m, &aPIExecCommandReturnStreamServer{stream})
}

type API_ExecCommandReturnStreamServer interface {
	Send(*ExecCommandReturnStreamResponse) error
	grpc.ServerStream
}

type aPIExecCommandReturnStreamServer struct {
	grpc.ServerStream
}

func (x *aPIExecCommandReturnStreamServer) Send(m *ExecCommandReturnStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _API_ExecCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ExecCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmapi.API/ExecCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ExecCommand(ctx, req.(*ExecCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_WriteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).WriteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmapi.API/WriteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).WriteFile(ctx, req.(*WriteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vmapi.API/ReadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ReadFile(ctx, req.(*ReadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vmapi.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecCommand",
			Handler:    _API_ExecCommand_Handler,
		},
		{
			MethodName: "WriteFile",
			Handler:    _API_WriteFile_Handler,
		},
		{
			MethodName: "ReadFile",
			Handler:    _API_ReadFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecCommandStream",
			Handler:       _API_ExecCommandStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ExecCommandReturnStream",
			Handler:       _API_ExecCommandReturnStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vmapi.proto",
}
